        -:    0:Source:../code/grafo.cc
        -:    0:Graph:grafo.gcno
        -:    0:Data:grafo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include<string.h>
        -:    4:#include "grafo.h"
        -:    5:
        -:    6:#define MAX_LINHA 1000
        -:    7:
        5:    8:grafo* cria_grafo(){
        5:    9:    grafo* G = (grafo *)malloc(sizeof(grafo));
        5:   10:    if(!G){
    #####:   11:        printf("Erro na alocacao!\n");
    #####:   12:        exit(1);
        -:   13:    }
        5:   14:    G->T=NULL;
        5:   15:    return G;
        -:   16:}
        -:   17:
       17:   18:grafo* insere_tarefa(grafo* G, int id_tarefa, char* nome_tarefa, int tarefa_executada, int duracao_tarefa, int inicio_min_tarefa, int n_prerequisitos) {
        -:   19:
       17:   20:    tarefa* t = (tarefa *)malloc(sizeof(tarefa));
        -:   21:
       17:   22:    if(!t){
    #####:   23:        printf("Erro na alocacao!\n");
    #####:   24:        exit(1);
        -:   25:    }
        -:   26:
       17:   27:    if(id_tarefa < 0)
    #####:   28:        return G;
        -:   29:    
       17:   30:    t->id_tarefa = id_tarefa;
       17:   31:    strcpy(t->nome_tarefa, nome_tarefa);
       17:   32:    t->tarefa_executada = tarefa_executada;
       17:   33:    t->duracao_tarefa = duracao_tarefa;
       17:   34:    t->inicio_min_tarefa = inicio_min_tarefa;
       17:   35:    t-> n_prerequisitos = n_prerequisitos;
        -:   36:
        -:   37:    tarefa* tmp;
        -:   38:
       17:   39:    if(G->T == NULL)
        5:   40:        G->T = t;
        -:   41:    else {
       12:   42:        for(tmp = G->T; tmp->prox != NULL;tmp = tmp->prox);
       12:   43:        tmp->prox = t;
        -:   44:    }
        -:   45:
       17:   46:    t->prox = NULL;
       17:   47:    t->prerequisitos_tarefa = NULL;
        -:   48:
       17:   49:    return G;
        -:   50:}
        -:   51:
    #####:   52:grafo* edita_tarefa(grafo* G, int id_tarefa, int novo_id_tarefa, char* nome_tarefa, int
        -:   53:tarefa_executada, int duracao_tarefa, int inicio_min_tarefa, int
        -:   54:n_prerequisitos,int* id_prerequisitos, int flag){
        -:   55:    tarefa *tmp;
    #####:   56:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:   57:        if(tmp->id_tarefa == id_tarefa){
    #####:   58:            if(flag&1)
    #####:   59:                strcpy(tmp->nome_tarefa, nome_tarefa);
    #####:   60:            if(flag&2)
    #####:   61:                tmp->tarefa_executada = tarefa_executada;
    #####:   62:            if(flag&4)
    #####:   63:                tmp->duracao_tarefa = duracao_tarefa;
    #####:   64:            if(flag&8)
    #####:   65:                tmp->inicio_min_tarefa = inicio_min_tarefa;
    #####:   66:            if(flag&16){
    #####:   67:                tmp->n_prerequisitos = n_prerequisitos;
        -:   68:                int i;
        -:   69:                prerequisitos* p;
    #####:   70:                for(p=tmp->prerequisitos_tarefa;p;){
    #####:   71:                    prerequisitos* l = p->prox;
    #####:   72:                    free(p);
    #####:   73:                    p = l;
        -:   74:                }
    #####:   75:                tmp->prerequisitos_tarefa = NULL;
    #####:   76:                for(i=0;i<n_prerequisitos;i++){
        -:   77:                    tarefa* t;
    #####:   78:                    for(t=G->T;t&&t->id_tarefa!=id_prerequisitos[i];t=t->prox); 
    #####:   79:                    G = insere_prerequisitos(G,id_tarefa,id_prerequisitos[i]);
        -:   80:                }
        -:   81:            }
    #####:   82:            if(flag&32){
    #####:   83:                if(!pesquisa_tarefa(G,novo_id_tarefa)){
        -:   84:                    tarefa *t;
    #####:   85:                    for(t=G->T;t!=NULL;t=t->prox){
        -:   86:                        prerequisitos* e;
    #####:   87:                        for(e=t->prerequisitos_tarefa;e!=NULL;e=e->prox){
    #####:   88:                            if(e->id_prerequisito == id_tarefa)
    #####:   89:                                e->id_prerequisito = novo_id_tarefa;
        -:   90:                        }
        -:   91:                    }
    #####:   92:                    tmp->id_tarefa = novo_id_tarefa;
        -:   93:                }
        -:   94:            }
    #####:   95:            break;   
        -:   96:        } 
        -:   97:        else 
    #####:   98:            printf("Error: insira a tarefa primeiro para editar.\n");
        -:   99:    }
    #####:  100:    return G;
        -:  101:}
        -:  102:
       13:  103:grafo* insere_prerequisitos(grafo* G, int id_tarefa, int id_prerequisito){
        -:  104:
       13:  105:    prerequisitos* e = (prerequisitos *)malloc(sizeof(prerequisitos));
        -:  106:    tarefa* tmp;
        -:  107:
       13:  108:    if(!e) {
    #####:  109:        printf("Erro na alocacao.\n");
    #####:  110:        exit(1);
        -:  111:    }
        -:  112:
       13:  113:    e->id_prerequisito = id_prerequisito;
        -:  114:
       13:  115:    tmp = procura_tarefa(G, id_tarefa);
        -:  116:
        -:  117:    prerequisitos* tmp2;
        -:  118:
       13:  119:    if(tmp->prerequisitos_tarefa == NULL)
        9:  120:	   tmp->prerequisitos_tarefa = e;
        -:  121:	else {
        4:  122:	   for(tmp2 = tmp->prerequisitos_tarefa; tmp2->prox != NULL; tmp2 = tmp2->prox);
        4:  123:	   tmp2->prox = e;
        -:  124:	}
        -:  125:
       13:  126:    e->prox = NULL;
        -:  127:
       13:  128:    return G;
        -:  129:}
        -:  130:
       13:  131:tarefa * procura_tarefa(grafo* G, int id_tarefa) {
        -:  132:
        -:  133:    tarefa *tmp;
        -:  134:
       41:  135:    for(tmp = G->T; tmp != NULL; tmp = tmp->prox) {
       41:  136:        if(tmp->id_tarefa == id_tarefa)
       13:  137:            return tmp;
        -:  138:    }
        -:  139:
    #####:  140:    return NULL;
        -:  141:}
        -:  142:
        1:  143:grafo* remove_tarefa(grafo* G, int id_tarefa){
        -:  144:    tarefa *tmp;
        4:  145:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
        3:  146:        if(tmp->prox && tmp->prox->id_tarefa == id_tarefa){
        1:  147:            tarefa* k = tmp->prox;
        1:  148:            tmp->prox = k->prox;
        1:  149:            free(k);
        -:  150:        }
        2:  151:        else if(tmp->id_tarefa == id_tarefa){
    #####:  152:            G->T = tmp->prox;
    #####:  153:            free(tmp);
    #####:  154:            break;
        -:  155:        }
        -:  156:    }
        4:  157:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
        -:  158:        prerequisitos* e;
        4:  159:        for(e=tmp->prerequisitos_tarefa;e!=NULL;e=e->prox){
        2:  160:            if(e->prox && e->prox->id_prerequisito == id_tarefa){
        1:  161:                prerequisitos* k = e->prox;
        1:  162:                e->prox = k->prox;
        1:  163:                free(k);
        -:  164:            }
        1:  165:            else if(e->id_prerequisito==id_tarefa){
        1:  166:                tmp->prerequisitos_tarefa = e->prox;
        1:  167:                free(e);
        1:  168:                break;
        -:  169:            }
        -:  170:        }
        -:  171:    }
        1:  172:    return G;
        -:  173:}
        -:  174:
        1:  175:grafo* remove_prerequisitos(grafo* G, int id_tarefa){
        -:  176:    tarefa *tmp;
        -:  177:    int achou;
        5:  178:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox) {
        -:  179:            prerequisitos* e;
        4:  180:            achou = 0;
        -:  181:
        7:  182:            for(e=tmp->prerequisitos_tarefa;e!=NULL;e=e->prox){
        3:  183:                if(e->prox && e->prox->id_prerequisito == id_tarefa){
    #####:  184:                    prerequisitos* k = e->prox;
    #####:  185:                    e->prox = k->prox;
    #####:  186:                    achou = 1;
    #####:  187:                    free(k);
        -:  188:                }
        3:  189:                else if(e->id_prerequisito == id_tarefa){
    #####:  190:                    tmp->prerequisitos_tarefa = e->prox;
    #####:  191:                    achou = 1;
    #####:  192:                    free(e);
    #####:  193:                    break;
        -:  194:                }
        -:  195:            }
        -:  196:
        4:  197:            if(achou) {
    #####:  198:                tmp->n_prerequisitos--;
        -:  199:            }
        -:  200:    }
        1:  201:    return G;
        -:  202:}
        -:  203:
        2:  204:grafo* le_grafo(char * nomeArquivo){
        -:  205:    char buffer[100];
        -:  206:    int i;
        2:  207:    grafo* G = cria_grafo();
        2:  208:    FILE * fp = fopen(nomeArquivo,  "r");
        -:  209:
        2:  210:    if(!fp) {
    #####:  211:        printf("error: impossivel abrir arquivo\n");
        -:  212:    }
        -:  213:    
       10:  214:    while(fgets(buffer,100,fp) != NULL){
        6:  215:        i = 0;
        6:  216:        buffer[strlen(buffer)-1] = '\0';
       24:  217:        while(buffer[i] != 0x20)
       12:  218:            i++;
        6:  219:        buffer[i] = '\0';
        6:  220:        int id_tarefa = atoi(buffer);
        6:  221:        i += 2;
        6:  222:        int ini = i;
       79:  223:        while(buffer[i] != 0x27)
       67:  224:            i++;
        6:  225:        buffer[i] = '\0';
        -:  226:        char nome_tarefa[100];
        6:  227:        strcpy(nome_tarefa,&buffer[ini]);
        6:  228:        i += 2;
        6:  229:        ini = i;
       18:  230:        while(buffer[i] != 0x20)
        6:  231:            i++;
        6:  232:        buffer[i] = '\0';
        6:  233:        int tarefa_executada = atoi(&buffer[ini]);
        6:  234:        i++;
        6:  235:        ini = i;
       18:  236:        while(buffer[i] != 0x20)
        6:  237:            i++;
        6:  238:        buffer[i] = '\0';
        6:  239:        int duracao_tarefa = atoi(&buffer[ini]);
        6:  240:        i++;
        6:  241:        ini = i;
       18:  242:        while(buffer[i] != 0x20)
        6:  243:            i++;
        6:  244:        buffer[i] = '\0';
        6:  245:        int inicio_min_tarefa = atoi(&buffer[ini]);
        6:  246:        i++;
        6:  247:        ini = i;
      236:  248:        while(buffer[i] != 0x20)
      224:  249:            i++;
        6:  250:        buffer[i] = '\0';
        6:  251:        int n_prerequisitos = atoi(&buffer[ini]);
        6:  252:        int prerequisitos[n_prerequisitos];
        -:  253:        G = insere_tarefa(G, id_tarefa, nome_tarefa, tarefa_executada,
        6:  254:        duracao_tarefa, inicio_min_tarefa, n_prerequisitos);
        -:  255:        int j;
       10:  256:        for(j=0;j<n_prerequisitos;j++) {
        4:  257:            i++;
        4:  258:            ini = i;
     2136:  259:            while(buffer[i] != 0x20)
     2128:  260:                i++;
        4:  261:            buffer[i] = '\0';
        4:  262:            prerequisitos[j] = atoi(&buffer[ini]);
        4:  263:            G = insere_prerequisitos(G, id_tarefa, prerequisitos[j]);
        -:  264:        }
        -:  265:    }
        -:  266:
        2:  267:    fclose(fp);
        2:  268:    return G;
        -:  269:}
        -:  270:/*
        -:  271:typedef struct LISTA{
        -:  272:    tarefa* v;
        -:  273:    struct LISTA* prox;
        -:  274:}prerequisitos_tarefa;
        -:  275:
        -:  276:typedef struct FILA{
        -:  277:    prerequisitos_tarefa* ini;
        -:  278:    prerequisitos_tarefa* fim;
        -:  279:}fila;
        -:  280:
        -:  281:fila* criaFila(){
        -:  282:    fila* f = (fila*)malloc(sizeof(fila));
        -:  283:    f->fim = f->ini = NULL;
        -:  284:    return f;
        -:  285:}
        -:  286:
        -:  287:void insereFila(tarefa* v, fila* f){
        -:  288:    if(f){
        -:  289:        prerequisitos_tarefa* t = (prerequisitos_tarefa*)malloc(sizeof(prerequisitos_tarefa));
        -:  290:        t->v = v;
        -:  291:        t->prox = NULL;
        -:  292:        if(!f->ini)
        -:  293:            f->ini = t;
        -:  294:        if(f->fim)
        -:  295:            f->fim->prox = t;
        -:  296:        f->fim = t;
        -:  297:    }
        -:  298:}
        -:  299:
        -:  300:tarefa* retiraFila(fila* f){
        -:  301:    if(f && f->ini){
        -:  302:        prerequisitos_tarefa* t = f->ini;
        -:  303:        tarefa* v = t->v;
        -:  304:        f->ini = t->prox;
        -:  305:        if(!t->prox)
        -:  306:            f->fim = f->ini;
        -:  307:        free(t);
        -:  308:        return v;
        -:  309:    }
        -:  310:    else
        -:  311:        return NULL;
        -:  312:}
        -:  313:
        -:  314:int filaVazia(fila* f){
        -:  315:    if(f && f->ini)
        -:  316:        return 0;
        -:  317:    return 1;
        -:  318:}
        -:  319:
        -:  320:void BFS(grafo* G, char* vorig){
        -:  321:    tarefa* u;
        -:  322:    for(u=G->T;u!=NULL;u=u->prox)
        -:  323:        if(strcmp(u->v,vorig) != 0){
        -:  324:            u->c = -1;
        -:  325:            u->d = 0x7FFFFFFF;
        -:  326:        }
        -:  327:    for(u=G->T;u!=NULL;u=u->prox)
        -:  328:        if(strcmp(u->v,vorig) == 0)
        -:  329:            break;
        -:  330:    u->c = 0;
        -:  331:    u->d = 0;
        -:  332:    fila* Q = criaFila();
        -:  333:    insereFila(u,Q);
        -:  334:    while(!filaVazia(Q)){
        -:  335:        tarefa* j = retiraFila(Q);
        -:  336:        prerequisitos* e;
        -:  337:        for(e=j->prerequisitos_tarefa;e!=NULL;e=e->prox){
        -:  338:            tarefa* tmp;
        -:  339:            for(tmp=G->T;tmp!=NULL;tmp=tmp->prox)
        -:  340:                if(strcmp(tmp->v,e->v) == 0)
        -:  341:                    break;
        -:  342:            if(tmp && tmp->c == -1){
        -:  343:                tmp->c = 0;
        -:  344:                tmp->d = j->d + e->peso;
        -:  345:                insereFila(tmp,Q);
        -:  346:            }
        -:  347:        }
        -:  348:        j->c = 1;
        -:  349:    }
        -:  350:}
        -:  351:
        -:  352:double peso_caminho(grafo* G, char* vorig, char* vdest){
        -:  353:    BFS(G,vorig);
        -:  354:    tarefa* tmp;
        -:  355:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox)
        -:  356:        if(strcmp(vdest,tmp->v)==0)
        -:  357:            return tmp->d;
        -:  358:    return -1;
        -:  359:}
        -:  360:
        -:  361:int grafo_conexo(grafo* G){
        -:  362:    tarefa* tmp;
        -:  363:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
        -:  364:        if(tmp->vorig == 1){
        -:  365:            BFS(G,tmp->v);
        -:  366:            tarefa* tmp2;
        -:  367:            for(tmp2=G->T;tmp2!=NULL;tmp2=tmp2->prox)
        -:  368:                if(tmp2->d == 0x7FFFFFFF)
        -:  369:                    return 0;
        -:  370:        }
        -:  371:   }
        -:  372:   return 1;
        -:  373:}*/
        -:  374:
        1:  375:void imprime_grafo(grafo* G, char* nome_arq) {
        -:  376:
        1:  377:    FILE* fp = fopen(nome_arq,"w");
        -:  378:    tarefa* tmp;
        -:  379:
        4:  380:    for(tmp = G->T; tmp != NULL; tmp = tmp->prox) {
        -:  381:
        3:  382:		fprintf(fp, "%d ",tmp->id_tarefa);
        3:  383:		fprintf(fp, "'%s' ", tmp->nome_tarefa);
        3:  384:		fprintf(fp, "%d ", tmp->tarefa_executada);
        3:  385:		fprintf(fp, "%d ", tmp->duracao_tarefa);
        3:  386:		fprintf(fp, "%d ", tmp->inicio_min_tarefa);
        3:  387:        if(tmp->n_prerequisitos != 0)
        2:  388:            fprintf(fp, "%d ", tmp->n_prerequisitos);
        -:  389:        else
        1:  390:            fprintf(fp, "%d", tmp->n_prerequisitos);
        -:  391:
        3:  392:		prerequisitos * tmp2 = tmp->prerequisitos_tarefa;
        -:  393:
        3:  394:		if(!tmp2)
        1:  395:			fprintf(fp, "\n");
        -:  396:		else {
        -:  397:
        4:  398:			for(tmp2 = tmp->prerequisitos_tarefa; tmp2 != NULL; tmp2 = tmp2->prox) {
        2:  399:				if (tmp2->prox == NULL)
        2:  400:					fprintf(fp, "%d\n", tmp2->id_prerequisito);
        -:  401:				else
    #####:  402:					fprintf(fp, "%d ", tmp2->id_prerequisito);
        -:  403:			}
        -:  404:
        -:  405:		}
        -:  406:
        -:  407:    }
        -:  408:
        1:  409:    fclose(fp);
        1:  410:}
        -:  411:
    #####:  412:void libera_grafo(grafo* G){
    #####:  413:    if(G){
    #####:  414:        tarefa* t = G->T;
    #####:  415:        while(t){
    #####:  416:            prerequisitos* p = t->prerequisitos_tarefa;
    #####:  417:            while (p){
    #####:  418:                prerequisitos* tmp = p->prox;
    #####:  419:                free(p);
    #####:  420:                p = tmp;
        -:  421:            }
    #####:  422:            tarefa* tmp1 = t->prox;
    #####:  423:            free(t);
    #####:  424:            t = tmp1;
        -:  425:        }
        -:  426:    }
    #####:  427:}
        -:  428:
    #####:  429:int verifica_consistencia(grafo* G){
        -:  430:    tarefa *tmp;
    #####:  431:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
        -:  432:        tarefa* tmp2;
    #####:  433:        for(tmp2=tmp->prox;tmp2!=NULL;tmp2=tmp2->prox){
    #####:  434:            if(tmp->id_tarefa == tmp2-> id_tarefa){
    #####:  435:                return tmp->id_tarefa;
        -:  436:            } else 
    #####:  437:                return -1;
        -:  438:        }
        -:  439:        prerequisitos* e;
    #####:  440:        for(e=tmp->prerequisitos_tarefa;e!=NULL;e=e->prox){
        -:  441:            prerequisitos* e2;
    #####:  442:            for(e2=e->prox;e2!=NULL;e2=e2->prox){
    #####:  443:                if(e->id_prerequisito == e2->id_prerequisito){
    #####:  444:                    return tmp->prerequisitos_tarefa->id_prerequisito;
        -:  445:                } else 
    #####:  446:                    return -1;
        -:  447:            }
        -:  448:        }
        -:  449:    }
    #####:  450:    printf("Os Pre requisitos e tarefas sao consistentes.\n");
    #####:  451:    return 1;
        -:  452:}
        -:  453:
    #####:  454:int pesquisa_tarefa(grafo* G, int id_tarefa){
        -:  455:    tarefa *tmp;
    #####:  456:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  457:        if(tmp->id_tarefa == id_tarefa)
    #####:  458:            return 1;
        -:  459:    }
    #####:  460:    return 0;
        -:  461:}
        -:  462:
        -:  463:
    #####:  464:int pesquisa_prerequisitos(grafo* G, int id_tarefa, int id_prerequisito){
        -:  465:    tarefa *tmp;
    #####:  466:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  467:        if(tmp->id_tarefa == id_tarefa){
        -:  468:            prerequisitos* e;
    #####:  469:            for(e=tmp->prerequisitos_tarefa;e!=NULL;e=e->prox){
    #####:  470:                if(e->id_prerequisito == id_prerequisito)
    #####:  471:                    return 1;
        -:  472:            }
        -:  473:        }
        -:  474:    }
    #####:  475:    return 0;
        -:  476:}
        -:  477:
    #####:  478:int tempo_minimo(grafo* G, int id_tarefa){
        -:  479:    tarefa* tmp;
    #####:  480:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  481:        if(tmp->id_tarefa == id_tarefa){
    #####:  482:            if(tmp->tempo_min != -1)
    #####:  483:                return tmp->tempo_min;
    #####:  484:            if(tmp->prerequisitos_tarefa == NULL){
    #####:  485:                tmp->tempo_min = tmp->inicio_min_tarefa + tmp->duracao_tarefa;
    #####:  486:                return tmp->tempo_min;
        -:  487:            }
    #####:  488:            prerequisitos* p = tmp->prerequisitos_tarefa;
    #####:  489:            int acc = 0;
    #####:  490:            while(p){
    #####:  491:                acc += tempo_minimo(G,p->id_prerequisito);                                 
    #####:  492:                p = p->prox;
        -:  493:            }
    #####:  494:            tmp->tempo_min = acc;
    #####:  495:            return tmp->tempo_min;
        -:  496:        }
        -:  497:    }
    #####:  498:    return 0;
        -:  499:}
        -:  500:
        -:  501:typedef struct LISTA{
        -:  502:    int t;
        -:  503:    struct LISTA *prox, *ant;
        -:  504:} lista;
        -:  505:
    #####:  506:lista* insere_lista(lista* a, int id){
    #####:  507:    lista* l = (lista*) malloc(sizeof(lista));  
    #####:  508:    l->t = id;
    #####:  509:    l->ant = NULL;
    #####:  510:    l->prox = a;
    #####:  511:    if(a)
    #####:  512:            a->ant = l;
    #####:  513:    return l;
        -:  514:}
        -:  515:
    #####:  516:lista* remove_lista(lista* a, int id, int* removeu){
        -:  517:    lista* l;
    #####:  518:    int flg_ult = 0;
    #####:  519:    int flg_prim = 0;
        -:  520:    lista* seg;
    #####:  521:    for(l=a;l!=NULL;l=l->prox){
    #####:  522:        if(l->t == id){
    #####:  523:            lista* tmp = l->ant;
    #####:  524:            if(tmp)
    #####:  525:                tmp->prox = l->prox;
    #####:  526:            if(l->prox)
    #####:  527:                l->prox->ant = tmp;
    #####:  528:            if(l->prox == NULL && l->ant == NULL)
    #####:  529:                flg_ult = 1;
    #####:  530:            if(l == a){
    #####:  531:                flg_prim = 1;
    #####:  532:                seg = l->prox;
        -:  533:            }
    #####:  534:            free(l);
    #####:  535:            *removeu = 1;
    #####:  536:            break;
        -:  537:        }
        -:  538:    }
    #####:  539:    *removeu = 0;
    #####:  540:    if(flg_ult)
    #####:  541:        return NULL;
    #####:  542:    if(flg_prim)
    #####:  543:        return seg;
    #####:  544:    return a;
        -:  545:}
        -:  546:
    #####:  547:int tempo_minimo_total(grafo* G){
        -:  548:    tarefa* tmp;
    #####:  549:    lista* l = NULL;
    #####:  550:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  551:         l = insere_lista(l,tmp->id_tarefa);
    #####:  552:         tmp->tempo_min = -1;
        -:  553:    }
    #####:  554:    int total = 0;
    #####:  555:    while(l){
    #####:  556:        int x = l->t;
        -:  557:        int removeu;
    #####:  558:        tempo_minimo(G,x);
    #####:  559:        for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  560:            if(tmp->tempo_min != -1)
    #####:  561:                l = remove_lista(l,tmp->id_tarefa,&removeu);
    #####:  562:            if(removeu)
    #####:  563:                total += tmp->tempo_min;
        -:  564:        }
        -:  565:    }
    #####:  566:    return total;
        -:  567:}
        -:  568:
        -:  569:struct vetor{
        -:  570:    int id_tarefa;
        -:  571:    int tempo_min;
        -:  572:};
        -:  573:
    #####:  574:int compara(const void* a, const void* b){
    #####:  575:    struct vetor x = *((struct vetor*)a);
    #####:  576:    struct vetor y = *((struct vetor*)b);
    #####:  577:    if(x.tempo_min == y.tempo_min)
    #####:  578:        return 0;
    #####:  579:    if(x.tempo_min < y.tempo_min)
    #####:  580:        return -1;
    #####:  581:    if(x.tempo_min > y.tempo_min)
    #####:  582:        return 1; 
    #####:  583:    return 0;
        -:  584:}
        -:  585:
    #####:  586:int* caminhos(grafo* G){
        -:  587:    tarefa* tmp;
    #####:  588:    int i = 0;
        -:  589:    struct vetor V[100]; //assumindo que o numero maximo de tarefas no grafo e < 100
    #####:  590:    lista* l = NULL;
    #####:  591:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  592:         l = insere_lista(l,tmp->id_tarefa);
    #####:  593:         tmp->tempo_min = -1;
        -:  594:    }
    #####:  595:    int total = 0;
    #####:  596:    while(l){
    #####:  597:        int x = l->t;
        -:  598:        int removeu;
    #####:  599:        tempo_minimo(G,x);
    #####:  600:        for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  601:            if(tmp->tempo_min != -1)
    #####:  602:                l = remove_lista(l,tmp->id_tarefa,&removeu);
    #####:  603:            if(removeu){
    #####:  604:                total += tmp->tempo_min;
    #####:  605:                V[i].id_tarefa = tmp->id_tarefa;
    #####:  606:                V[i++].tempo_min = tmp->tempo_min;
        -:  607:            }
        -:  608:        }
        -:  609:    }
    #####:  610:    qsort(V,i,sizeof(struct vetor),compara);
    #####:  611:    int *VetorOrdenado = (int*) malloc(100*sizeof(int));
        -:  612:    int j;
    #####:  613:    for(j=0;j<i;j++)
    #####:  614:        VetorOrdenado[j] = V[j].id_tarefa;
    #####:  615:    for(;j<100;j++)
    #####:  616:        VetorOrdenado[j] = INT_MAX; 
    #####:  617:    return VetorOrdenado;
        -:  618:} 
        -:  619:
    #####:  620:int* tarefas_concluidas(grafo* G, int periodo){
        -:  621:    tarefa* tmp;
    #####:  622:    int i = 0;
        -:  623:    struct vetor V[100]; //assumindo que o numero maximo de tarefas no grafo e < 100
    #####:  624:    lista* l = NULL;
    #####:  625:    for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  626:         l = insere_lista(l,tmp->id_tarefa);
    #####:  627:         tmp->tempo_min = -1;
    #####:  628:         tmp->tarefa_executada = 0;
        -:  629:    }
    #####:  630:    int total = 0;
    #####:  631:    while(l){
    #####:  632:        int x = l->t;
        -:  633:        int removeu;
    #####:  634:        tempo_minimo(G,x);
    #####:  635:        for(tmp=G->T;tmp!=NULL;tmp=tmp->prox){
    #####:  636:            if(tmp->tempo_min != -1)
    #####:  637:                l = remove_lista(l,tmp->id_tarefa,&removeu);
    #####:  638:            if(removeu){
    #####:  639:                if(tmp->tempo_min <= periodo)
    #####:  640:                    tmp->tarefa_executada = 1;
    #####:  641:                total += tmp->tempo_min;
    #####:  642:                V[i].id_tarefa = tmp->id_tarefa;
    #####:  643:                V[i++].tempo_min = tmp->tempo_min;
        -:  644:            }
        -:  645:        }
        -:  646:    }
    #####:  647:    qsort(V,i,sizeof(struct vetor),compara);
    #####:  648:    int *VetorOrdenado = (int*) malloc(100*sizeof(int));
    #####:  649:    int j,k=0;
    #####:  650:    for(j=0;j<i;j++)
    #####:  651:        if(V[j].tempo_min <= periodo)
    #####:  652:            VetorOrdenado[k++] = V[j].id_tarefa;
    #####:  653:    for(;k<100;k++)
    #####:  654:        VetorOrdenado[k] = INT_MAX; 
    #####:  655:    return VetorOrdenado;
        -:  656:}
