        -:    0:Source:../code/gtest_grafo.cc
        -:    0:Graph:gtest_grafo.gcno
        -:    0:Data:gtest_grafo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include"gtest/gtest.h"
        -:    2:#include "grafo.h"
        -:    3:
        5:    4:TEST(TestImportaTarefasArquivo, le_grafo) {
        1:    5:    char str_arq[] = "../code/arquivo.txt";
        -:    6:
        1:    7:    FILE* fp = fopen(str_arq,"r");
        1:    8:    ASSERT_TRUE(fp);
        -:    9:    
        1:   10:    grafo* G = le_grafo(str_arq);
        1:   11:    ASSERT_TRUE(G);
        -:   12:    
        1:   13:    EXPECT_EQ(G->T->id_tarefa,100);
        1:   14:    EXPECT_EQ(G->T->prox->id_tarefa,101);
        1:   15:    EXPECT_EQ(G->T->prox->prox->id_tarefa,102);
        -:   16:   
        -:   17:}
        -:   18:
        5:   19:TEST(TestGravaTarefasArquivo, imprime_grafo) {
        1:   20:    char str_arq[] = "../code/saida.txt";
        1:   21:    char str1[] = "primeira";
        1:   22:    char str2[] = "segunda";
        1:   23:    char str3[] = "terceira";
        -:   24:    
        1:   25:    grafo* G = cria_grafo();
        1:   26:    ASSERT_TRUE(G);
        -:   27:
        1:   28:    G = insere_tarefa(G, 1, str1, 0, 1, 0, 0);
        1:   29:    G = insere_tarefa(G, 2, str2, 0, 2, 2, 1);
        1:   30:    G = insere_tarefa(G, 3, str3, 0, 3, 5, 1);
        -:   31:
        1:   32:    G = insere_prerequisitos(G, 2, 1);
        1:   33:    G = insere_prerequisitos(G, 3, 2);
        -:   34:
        1:   35:    imprime_grafo(G, str_arq);
        -:   36:
        1:   37:    FILE* fp = fopen(str_arq, "r");
        1:   38:    ASSERT_TRUE(fp);
        -:   39:
        1:   40:    G = le_grafo(str_arq);
        1:   41:    EXPECT_EQ(G->T->id_tarefa,1);
        1:   42:    EXPECT_EQ(G->T->prox->id_tarefa,2);
        1:   43:    EXPECT_EQ(G->T->prox->prox->id_tarefa,3);
        1:   44:    ASSERT_TRUE(!G->T->prerequisitos_tarefa);
        1:   45:    EXPECT_EQ(G->T->prox->prerequisitos_tarefa->id_prerequisito, 1);
        1:   46:    EXPECT_EQ(G->T->prox->prox->prerequisitos_tarefa->id_prerequisito, 2);
        -:   47:
        -:   48:}
        -:   49:
        5:   50:TEST(TestRemoveTarefa,remove_tarefa) {
        1:   51:    char str1[] = "primeira";
        1:   52:    char str2[] = "segunda";
        1:   53:    char str3[] = "terceira";
        1:   54:    char str4[] = "quarta";
        -:   55:
        1:   56:    grafo* G = cria_grafo();
        -:   57:    //ASSERT_TRUE(G);
        -:   58:
        1:   59:    G = insere_tarefa(G, 1, str1, 0, 1, 0, 0);
        1:   60:    G = insere_tarefa(G, 2, str2, 0, 2, 2, 1);
        1:   61:    G = insere_tarefa(G, 3, str3, 0, 3, 5, 1);
        1:   62:    G = insere_tarefa(G, 4, str4, 5, 2, 5, 2);
        -:   63:
        1:   64:    G = insere_prerequisitos(G, 2, 1);
        1:   65:    G = insere_prerequisitos(G, 3, 2);
        1:   66:    G = insere_prerequisitos(G, 4, 3);
        1:   67:    G = insere_prerequisitos(G, 4, 2);
        -:   68:
        1:   69:    G = remove_tarefa(G, 2);
        -:   70:
        1:   71:    EXPECT_EQ(G->T->id_tarefa, 1);
        1:   72:    EXPECT_EQ(G->T->prox->id_tarefa, 3);
        1:   73:    EXPECT_EQ(G->T->prox->prox->id_tarefa,4);
        1:   74:    EXPECT_TRUE(!G->T->prerequisitos_tarefa);
        1:   75:    EXPECT_TRUE(!G->T->prox->prerequisitos_tarefa);
        1:   76:    EXPECT_EQ(G->T->prox->prox->prerequisitos_tarefa->id_prerequisito, 3);    
        1:   77:    EXPECT_TRUE(!G->T->prox->prox->prerequisitos_tarefa->prox);
        -:   78:
        1:   79:}
        -:   80:
        -:   81:
        -:   82:
        1:   83:int main(int argc, char **argv) {
        1:   84:        ::testing::InitGoogleTest( &argc, argv );
        1:   85:        return RUN_ALL_TESTS();
        3:   86:    }
